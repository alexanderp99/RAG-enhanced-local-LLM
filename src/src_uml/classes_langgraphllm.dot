digraph "classes_LanggraphLLM" {
rankdir=BT
charset="utf-8"
"src.LanggraphLLM.Langgraph" [color="black", fontcolor="black", label=<{Langgraph|allow_document_search : bool<br ALIGN="LEFT"/>graph : CompiledGraph<br ALIGN="LEFT"/>model : ChatOllama<br ALIGN="LEFT"/>translation_model : ChatOllama<br ALIGN="LEFT"/>vectordb : DocumentVectorStorage<br ALIGN="LEFT"/>workflow : StateGraph<br ALIGN="LEFT"/>|call_tool(state: AgentState): dict<br ALIGN="LEFT"/>call_vectordb(state: AgentState): dict<br ALIGN="LEFT"/>check_RAG_response(state: AgentState): str<br ALIGN="LEFT"/>check_for_hallucination(state: AgentState): None<br ALIGN="LEFT"/>check_if_document_search_enabled(state: AgentState)<br ALIGN="LEFT"/>check_if_language_is_english(state: AgentState)<br ALIGN="LEFT"/>check_if_language_is_english2(state: AgentState)<br ALIGN="LEFT"/>check_user_message_for_profoundness(state: AgentState): str<br ALIGN="LEFT"/>document_agent(state: AgentState): dict<br ALIGN="LEFT"/>end_node(state: AgentState)<br ALIGN="LEFT"/>get_langgraph_instance()<br ALIGN="LEFT"/>hallucination_check(state: AgentState): str<br ALIGN="LEFT"/>intermediate_node1(state: AgentState)<br ALIGN="LEFT"/>plain_response(state: AgentState): dict<br ALIGN="LEFT"/>profanity_check(state: AgentState): dict<br ALIGN="LEFT"/>retrieve_web_knowledge(state: AgentState): dict<br ALIGN="LEFT"/>run(inputs: dict): BaseMessage<br ALIGN="LEFT"/>run_stream(inputs: dict): (str, str)<br ALIGN="LEFT"/>setup_workflow()<br ALIGN="LEFT"/>start_node(state: AgentState)<br ALIGN="LEFT"/>translate_output_into_user_language(state: AgentState)<br ALIGN="LEFT"/>translate_user_message_into_english(state: AgentState)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
